{
  "contractName": "PermittableToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bridgeContract",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isBridge",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finishMinting",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTokenInterfacesVersion",
      "outputs": [
        {
          "name": "major",
          "type": "uint64"
        },
        {
          "name": "minor",
          "type": "uint64"
        },
        {
          "name": "patch",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PERMIT_TYPEHASH_LEGACY",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "expirations",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_recipient",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "result",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "result",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "pull",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "move",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "name": "_allowed",
          "type": "bool"
        },
        {
          "name": "_v",
          "type": "uint8"
        },
        {
          "name": "_r",
          "type": "bytes32"
        },
        {
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "name": "_v",
          "type": "uint8"
        },
        {
          "name": "_r",
          "type": "bytes32"
        },
        {
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526006805460a060020a60ff02191690553480156200002157600080fd5b50604051620021623803806200216283398101604090815281516020808401519284015160608501519285018051909594909401939092918591859185918491849184916200007691600091860190620002d0565b5081516200008c906001906020850190620002d0565b506002805460ff90921660ff19909216919091179055505060068054600160a060020a03191633179055505050801515620000c657600080fd5b60405180807f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081526020017f76657273696f6e2c75696e7432353620636861696e49642c616464726573732081526020017f766572696679696e67436f6e747261637429000000000000000000000000000081525060520190506040518091039020846040518082805190602001908083835b602083106200017a5780518252601f19909201916020918201910162000159565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855260018084527f3100000000000000000000000000000000000000000000000000000000000000928401928352945190965091945090928392508083835b60208310620002045780518252601f199092019160209182019101620001e3565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019890985281840196909652606081019690965250608085018690523060a0808701919091528151808703909101815260c09095019081905284519093849350850191508083835b60208310620002965780518252601f19909201916020918201910162000275565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600855506200037595505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031357805160ff191683800117855562000343565b8280016001018555821562000343579182015b828111156200034357825182559160200191906001019062000326565b506200035192915062000355565b5090565b6200037291905b808211156200035157600081556001016200035c565b90565b611ddd80620003856000396000f3006080604052600436106101b35763ffffffff60e060020a60003504166305d2035b81146101b857806306fdde03146101e1578063095ea7b31461026b5780630b26cf661461028f57806318160ddd146102b257806323b872dd146102d957806330adf81f14610303578063313ce567146103185780633644e5151461034357806339509351146103585780634000aea01461037c57806340c10f19146103ad57806342966c68146103d157806354fd4d50146103e957806366188463146103fe57806369ffa08a1461042257806370a0823114610449578063715018a61461046a578063726600ce1461047f5780637d64bcb4146104a05780637ecebe00146104b5578063859ba28c146104d65780638da5cb5b146105175780638fcbaf0c1461054857806395d89b4114610586578063a457c2d71461059b578063a9059cbb146105bf578063b753a98c146105e3578063bb35783b14610607578063c6a1dedf14610631578063cd59658314610646578063d505accf1461065b578063d73dd62314610694578063dd62ed3e146106b8578063f2d5d56b146106df578063f2fde38b14610703578063ff9e884d14610724575b600080fd5b3480156101c457600080fd5b506101cd61074b565b604080519115158252519081900360200190f35b3480156101ed57600080fd5b506101f661076c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610230578181015183820152602001610218565b50505050905090810190601f16801561025d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027757600080fd5b506101cd600160a060020a03600435166024356107fa565b34801561029b57600080fd5b506102b0600160a060020a0360043516610810565b005b3480156102be57600080fd5b506102c761086a565b60408051918252519081900360200190f35b3480156102e557600080fd5b506101cd600160a060020a0360043581169060243516604435610870565b34801561030f57600080fd5b506102c7610a38565b34801561032457600080fd5b5061032d610a5c565b6040805160ff9092168252519081900360200190f35b34801561034f57600080fd5b506102c7610a65565b34801561036457600080fd5b506101cd600160a060020a0360043516602435610a6b565b34801561038857600080fd5b506101cd60048035600160a060020a0316906024803591604435918201910135610aac565b3480156103b957600080fd5b506101cd600160a060020a0360043516602435610bbd565b3480156103dd57600080fd5b506102b0600435610cc8565b3480156103f557600080fd5b506101f6610cd5565b34801561040a57600080fd5b506101cd600160a060020a0360043516602435610d0c565b34801561042e57600080fd5b506102b0600160a060020a0360043581169060243516610de9565b34801561045557600080fd5b506102c7600160a060020a0360043516610e0e565b34801561047657600080fd5b506102b0610e29565b34801561048b57600080fd5b506101cd600160a060020a0360043516610e40565b3480156104ac57600080fd5b506101cd610e54565b3480156104c157600080fd5b506102c7600160a060020a0360043516610e5b565b3480156104e257600080fd5b506104eb610e6d565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b34801561052357600080fd5b5061052c610e78565b60408051600160a060020a039092168252519081900360200190f35b34801561055457600080fd5b506102b0600160a060020a0360043581169060243516604435606435608435151560ff60a4351660c43560e435610e87565b34801561059257600080fd5b506101f6610fc5565b3480156105a757600080fd5b506101cd600160a060020a036004351660243561101f565b3480156105cb57600080fd5b506101cd600160a060020a0360043516602435611032565b3480156105ef57600080fd5b506102b0600160a060020a0360043516602435611054565b34801561061357600080fd5b506102b0600160a060020a0360043581169060243516604435611064565b34801561063d57600080fd5b506102c7611075565b34801561065257600080fd5b5061052c611099565b34801561066757600080fd5b506102b0600160a060020a036004358116906024351660443560643560ff6084351660a43560c4356110a8565b3480156106a057600080fd5b506101cd600160a060020a0360043516602435611184565b3480156106c457600080fd5b506102c7600160a060020a036004358116906024351661120b565b3480156106eb57600080fd5b506102b0600160a060020a0360043516602435611236565b34801561070f57600080fd5b506102b0600160a060020a0360043516611241565b34801561073057600080fd5b506102c7600160a060020a0360043581169060243516611261565b60065474010000000000000000000000000000000000000000900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107f25780601f106107c7576101008083540402835291602001916107f2565b820191906000526020600020905b8154815290600101906020018083116107d557829003601f168201915b505050505081565b600061080733848461127e565b50600192915050565b600654600160a060020a0316331461082757600080fd5b610830816112c0565b151561083b57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045490565b600080600160a060020a038516151561088857600080fd5b600160a060020a038416151561089d57600080fd5b600160a060020a0385166000908152600360205260409020546108c6908463ffffffff6112c816565b600160a060020a0380871660009081526003602052604080822093909355908616815220546108fb908463ffffffff6112da16565b600160a060020a038086166000818152600360209081526040918290209490945580518781529051919392891692600080516020611d7283398151915292918290030190a3600160a060020a0385163314610a225761095a853361120b565b905060001981146109c457610975818463ffffffff6112c816565b600160a060020a038616600081815260056020908152604080832033808552908352928190208590558051948552519193600080516020611d92833981519152929081900390910190a3610a22565b600160a060020a0385166000908152600a602090815260408083203384529091529020541580610a175750600160a060020a0385166000908152600a602090815260408083203384529091529020544211155b1515610a2257600080fd5b610a2d8585856112ed565b506001949350505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60025460ff1681565b60085481565b336000818152600560209081526040808320600160a060020a03871684529091528120549091610807918590610aa7908663ffffffff6112da16565b61127e565b600084600160a060020a03811615801590610ad05750600160a060020a0381163014155b1515610adb57600080fd5b610ae58686611324565b1515610af057600080fd5b85600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16878787604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a3610b65866112c0565b15610bb157610ba633878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843750611330945050505050565b1515610bb157600080fd5b50600195945050505050565b600654600090600160a060020a03163314610bd757600080fd5b60065474010000000000000000000000000000000000000000900460ff1615610bff57600080fd5b600454610c12908363ffffffff6112da16565b600455600160a060020a038316600090815260036020526040902054610c3e908363ffffffff6112da16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611d728339815191529181900360200190a350600192915050565b610cd233826114ad565b50565b60408051808201909152600181527f3100000000000000000000000000000000000000000000000000000000000000602082015281565b336000908152600560209081526040808320600160a060020a0386168452909152812054808310610d6057336000908152600560209081526040808320600160a060020a0388168452909152812055610d95565b610d70818463ffffffff6112c816565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a038916808552908352928190205481519081529051929392600080516020611d92833981519152929181900390910190a35060019392505050565b600654600160a060020a03163314610e0057600080fd5b610e0a828261159c565b5050565b600160a060020a031660009081526003602052604090205490565b600654600160a060020a031633146101b357600080fd5b600754600160a060020a0390811691161490565b6000806000fd5b60096020526000908152604090205481565b600260056000909192565b600654600160a060020a031681565b600080861580610e975750864211155b1515610ea257600080fd5b604080517fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb6020820152600160a060020a03808d16828401528b166060820152608081018a905260a0810189905287151560c0808301919091528251808303909101815260e0909101909152610f17906115da565b9150610f25828686866116e1565b600160a060020a038b8116911614610f3c57600080fd5b600160a060020a038a1660009081526009602052604090208054600181019091558814610f6857600080fd5b85610f74576000610f78565b6000195b905085610f86576000610f88565b865b600160a060020a03808c166000908152600a60209081526040808320938e1683529290522055610fb98a8a836118e3565b50505050505050505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107f25780601f106107c7576101008083540402835291602001916107f2565b600061102b8383610d0c565b9392505050565b600061103e8383611324565b151561104957600080fd5b6108073384846112ed565b61105f338383610870565b505050565b61106f838383610870565b50505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb81565b600754600160a060020a031690565b600080428610156110b857600080fd5b600160a060020a03808a1660008181526009602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99281019290925281830193909352928b166060840152608083018a905260a0830182905260c08084018a90528151808503909101815260e090930190529250611149906115da565b9050611157818686866116e1565b600160a060020a038a811691161461116e57600080fd5b61117989898961127e565b505050505050505050565b336000908152600560209081526040808320600160a060020a03861684529091528120546111b8908363ffffffff6112da16565b336000818152600560209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020611d92833981519152929081900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b61105f823383610870565b600654600160a060020a0316331461125857600080fd5b610cd281611a3e565b600a60209081526000928352604080842090915290825290205481565b6112898383836118e3565b60001981141561105f57600160a060020a038084166000908152600a60209081526040808320938616835292905290812055505050565b6000903b1190565b6000828211156112d457fe5b50900390565b818101828110156112e757fe5b92915050565b6112f682610e40565b1561105f5760408051600081526020810190915261131990849084908490611330565b151561105f57600080fd5b600061102b8383611abc565b600083600160a060020a031663a4c0ed3660e060020a028685856040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113a8578181015183820152602001611390565b50505050905090810190601f1680156113d55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909916989098178852518151919790965086955093509150819050838360005b8381101561146357818101518382015260200161144b565b50505050905090810190601f1680156114905780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1979650505050505050565b600160a060020a0382166000908152600360205260409020548111156114d257600080fd5b600160a060020a0382166000908152600360205260409020546114fb908263ffffffff6112c816565b600160a060020a038316600090815260036020526040902055600454611527908263ffffffff6112c816565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611d728339815191529181900360200190a35050565b80600160a060020a03811615156115b257600080fd5b600160a060020a03831615156115d0576115cb82611b8b565b61105f565b61105f8383611b97565b6000600854826040518082805190602001908083835b6020831061160f5780518252601f1990920191602091820191016115f0565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f190100000000000000000000000000000000000000000000000000000000000083830152602283019790975260428083019790975283518083039097018752606290910192839052855192945084935085019190508083835b602083106116af5780518252601f199092019160209182019101611690565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000808460ff16601b14806116f957508460ff16601c145b1515611775576040805160e560020a62461bcd02815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611813576040805160e560020a62461bcd02815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60408051600080825260208083018085528a905260ff8916838501526060830188905260808301879052925160019360a0808501949193601f19840193928390039091019190865af115801561186d573d6000803e3d6000fd5b5050604051601f190151915050600160a060020a03811615156118da576040805160e560020a62461bcd02815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600160a060020a0383161515611968576040805160e560020a62461bcd028152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03821615156119ee576040805160e560020a62461bcd02815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0380841660008181526005602090815260408083209487168084529482529182902085905581518581529151600080516020611d928339815191529281900390910190a3505050565b600160a060020a0381161515611a5357600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600090815260036020526040812054821115611ad857600080fd5b600160a060020a0383161515611aed57600080fd5b33600090815260036020526040902054611b0d908363ffffffff6112c816565b3360009081526003602052604080822092909255600160a060020a03851681522054611b3f908363ffffffff6112da16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020611d728339815191529281900390910190a350600192915050565b3031610e0a8282611c44565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600091600160a060020a038416916370a0823191602480830192602092919082900301818787803b158015611bfc57600080fd5b505af1158015611c10573d6000803e3d6000fd5b505050506040513d6020811015611c2657600080fd5b5051905061106f600160a060020a038516848363ffffffff611cac16565b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501515610e0a578082611c79611d41565b600160a060020a039091168152604051908190036020019082f080158015611ca5573d6000803e3d6000fd5b5050505050565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015611d0f57600080fd5b505af1158015611d23573d6000803e3d6000fd5b505050503d1561105f5760206000803e600051151561105f57600080fd5b604051602180611d51833901905600608060405260405160208060218339810160405251600160a060020a038116ff00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820fdf30bd4c75e935eebe96ee864c9059a8d34259975e15edea3a84102a5d2ea700029",
  "deployedBytecode": "0x6080604052600436106101b35763ffffffff60e060020a60003504166305d2035b81146101b857806306fdde03146101e1578063095ea7b31461026b5780630b26cf661461028f57806318160ddd146102b257806323b872dd146102d957806330adf81f14610303578063313ce567146103185780633644e5151461034357806339509351146103585780634000aea01461037c57806340c10f19146103ad57806342966c68146103d157806354fd4d50146103e957806366188463146103fe57806369ffa08a1461042257806370a0823114610449578063715018a61461046a578063726600ce1461047f5780637d64bcb4146104a05780637ecebe00146104b5578063859ba28c146104d65780638da5cb5b146105175780638fcbaf0c1461054857806395d89b4114610586578063a457c2d71461059b578063a9059cbb146105bf578063b753a98c146105e3578063bb35783b14610607578063c6a1dedf14610631578063cd59658314610646578063d505accf1461065b578063d73dd62314610694578063dd62ed3e146106b8578063f2d5d56b146106df578063f2fde38b14610703578063ff9e884d14610724575b600080fd5b3480156101c457600080fd5b506101cd61074b565b604080519115158252519081900360200190f35b3480156101ed57600080fd5b506101f661076c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610230578181015183820152602001610218565b50505050905090810190601f16801561025d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027757600080fd5b506101cd600160a060020a03600435166024356107fa565b34801561029b57600080fd5b506102b0600160a060020a0360043516610810565b005b3480156102be57600080fd5b506102c761086a565b60408051918252519081900360200190f35b3480156102e557600080fd5b506101cd600160a060020a0360043581169060243516604435610870565b34801561030f57600080fd5b506102c7610a38565b34801561032457600080fd5b5061032d610a5c565b6040805160ff9092168252519081900360200190f35b34801561034f57600080fd5b506102c7610a65565b34801561036457600080fd5b506101cd600160a060020a0360043516602435610a6b565b34801561038857600080fd5b506101cd60048035600160a060020a0316906024803591604435918201910135610aac565b3480156103b957600080fd5b506101cd600160a060020a0360043516602435610bbd565b3480156103dd57600080fd5b506102b0600435610cc8565b3480156103f557600080fd5b506101f6610cd5565b34801561040a57600080fd5b506101cd600160a060020a0360043516602435610d0c565b34801561042e57600080fd5b506102b0600160a060020a0360043581169060243516610de9565b34801561045557600080fd5b506102c7600160a060020a0360043516610e0e565b34801561047657600080fd5b506102b0610e29565b34801561048b57600080fd5b506101cd600160a060020a0360043516610e40565b3480156104ac57600080fd5b506101cd610e54565b3480156104c157600080fd5b506102c7600160a060020a0360043516610e5b565b3480156104e257600080fd5b506104eb610e6d565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b34801561052357600080fd5b5061052c610e78565b60408051600160a060020a039092168252519081900360200190f35b34801561055457600080fd5b506102b0600160a060020a0360043581169060243516604435606435608435151560ff60a4351660c43560e435610e87565b34801561059257600080fd5b506101f6610fc5565b3480156105a757600080fd5b506101cd600160a060020a036004351660243561101f565b3480156105cb57600080fd5b506101cd600160a060020a0360043516602435611032565b3480156105ef57600080fd5b506102b0600160a060020a0360043516602435611054565b34801561061357600080fd5b506102b0600160a060020a0360043581169060243516604435611064565b34801561063d57600080fd5b506102c7611075565b34801561065257600080fd5b5061052c611099565b34801561066757600080fd5b506102b0600160a060020a036004358116906024351660443560643560ff6084351660a43560c4356110a8565b3480156106a057600080fd5b506101cd600160a060020a0360043516602435611184565b3480156106c457600080fd5b506102c7600160a060020a036004358116906024351661120b565b3480156106eb57600080fd5b506102b0600160a060020a0360043516602435611236565b34801561070f57600080fd5b506102b0600160a060020a0360043516611241565b34801561073057600080fd5b506102c7600160a060020a0360043581169060243516611261565b60065474010000000000000000000000000000000000000000900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107f25780601f106107c7576101008083540402835291602001916107f2565b820191906000526020600020905b8154815290600101906020018083116107d557829003601f168201915b505050505081565b600061080733848461127e565b50600192915050565b600654600160a060020a0316331461082757600080fd5b610830816112c0565b151561083b57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045490565b600080600160a060020a038516151561088857600080fd5b600160a060020a038416151561089d57600080fd5b600160a060020a0385166000908152600360205260409020546108c6908463ffffffff6112c816565b600160a060020a0380871660009081526003602052604080822093909355908616815220546108fb908463ffffffff6112da16565b600160a060020a038086166000818152600360209081526040918290209490945580518781529051919392891692600080516020611d7283398151915292918290030190a3600160a060020a0385163314610a225761095a853361120b565b905060001981146109c457610975818463ffffffff6112c816565b600160a060020a038616600081815260056020908152604080832033808552908352928190208590558051948552519193600080516020611d92833981519152929081900390910190a3610a22565b600160a060020a0385166000908152600a602090815260408083203384529091529020541580610a175750600160a060020a0385166000908152600a602090815260408083203384529091529020544211155b1515610a2257600080fd5b610a2d8585856112ed565b506001949350505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60025460ff1681565b60085481565b336000818152600560209081526040808320600160a060020a03871684529091528120549091610807918590610aa7908663ffffffff6112da16565b61127e565b600084600160a060020a03811615801590610ad05750600160a060020a0381163014155b1515610adb57600080fd5b610ae58686611324565b1515610af057600080fd5b85600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16878787604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a3610b65866112c0565b15610bb157610ba633878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843750611330945050505050565b1515610bb157600080fd5b50600195945050505050565b600654600090600160a060020a03163314610bd757600080fd5b60065474010000000000000000000000000000000000000000900460ff1615610bff57600080fd5b600454610c12908363ffffffff6112da16565b600455600160a060020a038316600090815260036020526040902054610c3e908363ffffffff6112da16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611d728339815191529181900360200190a350600192915050565b610cd233826114ad565b50565b60408051808201909152600181527f3100000000000000000000000000000000000000000000000000000000000000602082015281565b336000908152600560209081526040808320600160a060020a0386168452909152812054808310610d6057336000908152600560209081526040808320600160a060020a0388168452909152812055610d95565b610d70818463ffffffff6112c816565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a038916808552908352928190205481519081529051929392600080516020611d92833981519152929181900390910190a35060019392505050565b600654600160a060020a03163314610e0057600080fd5b610e0a828261159c565b5050565b600160a060020a031660009081526003602052604090205490565b600654600160a060020a031633146101b357600080fd5b600754600160a060020a0390811691161490565b6000806000fd5b60096020526000908152604090205481565b600260056000909192565b600654600160a060020a031681565b600080861580610e975750864211155b1515610ea257600080fd5b604080517fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb6020820152600160a060020a03808d16828401528b166060820152608081018a905260a0810189905287151560c0808301919091528251808303909101815260e0909101909152610f17906115da565b9150610f25828686866116e1565b600160a060020a038b8116911614610f3c57600080fd5b600160a060020a038a1660009081526009602052604090208054600181019091558814610f6857600080fd5b85610f74576000610f78565b6000195b905085610f86576000610f88565b865b600160a060020a03808c166000908152600a60209081526040808320938e1683529290522055610fb98a8a836118e3565b50505050505050505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107f25780601f106107c7576101008083540402835291602001916107f2565b600061102b8383610d0c565b9392505050565b600061103e8383611324565b151561104957600080fd5b6108073384846112ed565b61105f338383610870565b505050565b61106f838383610870565b50505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb81565b600754600160a060020a031690565b600080428610156110b857600080fd5b600160a060020a03808a1660008181526009602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99281019290925281830193909352928b166060840152608083018a905260a0830182905260c08084018a90528151808503909101815260e090930190529250611149906115da565b9050611157818686866116e1565b600160a060020a038a811691161461116e57600080fd5b61117989898961127e565b505050505050505050565b336000908152600560209081526040808320600160a060020a03861684529091528120546111b8908363ffffffff6112da16565b336000818152600560209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020611d92833981519152929081900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b61105f823383610870565b600654600160a060020a0316331461125857600080fd5b610cd281611a3e565b600a60209081526000928352604080842090915290825290205481565b6112898383836118e3565b60001981141561105f57600160a060020a038084166000908152600a60209081526040808320938616835292905290812055505050565b6000903b1190565b6000828211156112d457fe5b50900390565b818101828110156112e757fe5b92915050565b6112f682610e40565b1561105f5760408051600081526020810190915261131990849084908490611330565b151561105f57600080fd5b600061102b8383611abc565b600083600160a060020a031663a4c0ed3660e060020a028685856040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113a8578181015183820152602001611390565b50505050905090810190601f1680156113d55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909916989098178852518151919790965086955093509150819050838360005b8381101561146357818101518382015260200161144b565b50505050905090810190601f1680156114905780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1979650505050505050565b600160a060020a0382166000908152600360205260409020548111156114d257600080fd5b600160a060020a0382166000908152600360205260409020546114fb908263ffffffff6112c816565b600160a060020a038316600090815260036020526040902055600454611527908263ffffffff6112c816565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611d728339815191529181900360200190a35050565b80600160a060020a03811615156115b257600080fd5b600160a060020a03831615156115d0576115cb82611b8b565b61105f565b61105f8383611b97565b6000600854826040518082805190602001908083835b6020831061160f5780518252601f1990920191602091820191016115f0565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f190100000000000000000000000000000000000000000000000000000000000083830152602283019790975260428083019790975283518083039097018752606290910192839052855192945084935085019190508083835b602083106116af5780518252601f199092019160209182019101611690565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000808460ff16601b14806116f957508460ff16601c145b1515611775576040805160e560020a62461bcd02815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611813576040805160e560020a62461bcd02815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60408051600080825260208083018085528a905260ff8916838501526060830188905260808301879052925160019360a0808501949193601f19840193928390039091019190865af115801561186d573d6000803e3d6000fd5b5050604051601f190151915050600160a060020a03811615156118da576040805160e560020a62461bcd02815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600160a060020a0383161515611968576040805160e560020a62461bcd028152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03821615156119ee576040805160e560020a62461bcd02815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0380841660008181526005602090815260408083209487168084529482529182902085905581518581529151600080516020611d928339815191529281900390910190a3505050565b600160a060020a0381161515611a5357600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600090815260036020526040812054821115611ad857600080fd5b600160a060020a0383161515611aed57600080fd5b33600090815260036020526040902054611b0d908363ffffffff6112c816565b3360009081526003602052604080822092909255600160a060020a03851681522054611b3f908363ffffffff6112da16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020611d728339815191529281900390910190a350600192915050565b3031610e0a8282611c44565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600091600160a060020a038416916370a0823191602480830192602092919082900301818787803b158015611bfc57600080fd5b505af1158015611c10573d6000803e3d6000fd5b505050506040513d6020811015611c2657600080fd5b5051905061106f600160a060020a038516848363ffffffff611cac16565b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501515610e0a578082611c79611d41565b600160a060020a039091168152604051908190036020019082f080158015611ca5573d6000803e3d6000fd5b5050505050565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015611d0f57600080fd5b505af1158015611d23573d6000803e3d6000fd5b505050503d1561105f5760206000803e600051151561105f57600080fd5b604051602180611d51833901905600608060405260405160208060218339810160405251600160a060020a038116ff00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820fdf30bd4c75e935eebe96ee864c9059a8d34259975e15edea3a84102a5d2ea700029",
  "sourceMap": "60:10604:4:-;;;436:35:136;;;-1:-1:-1;;;;;;436:35:136;;;869:542:4;5:2:-1;;;;30:1;27;20:12;5:2;869:542:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;463:12:133;;869:542:4;;;;;;;;;;;;;;;;;;;;;;463:12:133;;:4;;:12;;;;:::i;:::-;-1:-1:-1;481:16:133;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;503:8:133;:20;;;;;;-1:-1:-1;;503:20:133;;;;;;;;;-1:-1:-1;;567:5:130;:18;;-1:-1:-1;;;;;;567:18:130;575:10;567:18;;;-1:-1:-1;;;1050:13:4;;;1042:22;;;;;;1144:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1273:5;1257:23;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1257:23:4;;;;;;;;;;;;1314:7;;;;;274:1:-1;1314:7:4;;;;;;;;;;1298:25;;1257:23;;-1:-1:-1;1257:23:4;;-1:-1:-1;1298:25:4;;;;-1:-1:-1;274:1;1298:25:4;1314:7;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1298:25:4;;;;;;;;;;;;1116:278;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1116:278:4;;;;;;1375:4;1116:278;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1116:278:4;;;;;;;;1093:311;;1116:278;;;;-1:-1:-1;1093:311:4;;;-1:-1:-1;1093:311:4;1116:278;1093:311;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1093:311:4;;;;;;;;;;1074:16;:330;-1:-1:-1;60:10604:4;;-1:-1:-1;;;;;;60:10604:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:10604:4;;;-1:-1:-1;60:10604:4;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "60:10604:4:-;;;;;;;;;-1:-1:-1;;;60:10604:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;436:35:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;436:35:136;;;;;;;;;;;;;;;;;;;;;;319:18:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;319:18:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;319:18:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:165:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3499:165:4;-1:-1:-1;;;;;3499:165:4;;;;;;;1061:183:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1061:183:0;-1:-1:-1;;;;;1061:183:0;;;;;;;389:83:131;;8:9:-1;5:2;;;30:1;27;20:12;5:2;389:83:131;;;;;;;;;;;;;;;;;;;;1925:1348:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1925:1348:4;-1:-1:-1;;;;;1925:1348:4;;;;;;;;;;;;634:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;634:108:4;;;;365:21:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;365:21:133;;;;;;;;;;;;;;;;;;;;;;;179:31:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;179:31:4;;;;3889:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3889:215:4;-1:-1:-1;;;;;3889:215:4;;;;;;;1425:365:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1425:365:0;;;;-1:-1:-1;;;;;1425:365:0;;;;;;;;;;;;;;;;854:312:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;854:312:136;-1:-1:-1;;;;;854:312:136;;;;;;;353:73:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;353:73:132;;;;;113:36:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;113:36:4;;;;3679:432:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3679:432:137;-1:-1:-1;;;;;3679:432:137;;;;;;;4178:110:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4178:110:0;-1:-1:-1;;;;;4178:110:0;;;;;;;;;;1149:99:131;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1149:99:131;-1:-1:-1;;;;;1149:99:131;;;;;3872:71:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3872:71:0;;;;3176:117;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3176:117:0;-1:-1:-1;;;;;3176:117:0;;;;;3794:72;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3794:72:0;;;;749:41:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;749:41:4;-1:-1:-1;;;;;749:41:4;;;;;1796:135:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1796:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;238:20:130;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:130;;;;;;;;-1:-1:-1;;;;;238:20:130;;;;;;;;;;;;;;6089:656:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6089:656:4;-1:-1:-1;;;;;6089:656:4;;;;;;;;;;;;;;;;;;;;;;;;;;341:20:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;341:20:133;;;;4453:163:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4453:163:0;-1:-1:-1;;;;;4453:163:0;;;;;;;2070:194;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2070:194:0;-1:-1:-1;;;;;2070:194:0;;;;;;;4252:106:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4252:106:4;-1:-1:-1;;;;;4252:106:4;;;;;;;4890:116;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4890:116:4;-1:-1:-1;;;;;4890:116:4;;;;;;;;;;;;367:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;367:115:4;;;;955:100:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;955:100:0;;;;7686:509:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7686:509:4;-1:-1:-1;;;;;7686:509:4;;;;;;;;;;;;;;;;;;;;;;2926:296:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2926:296:137;-1:-1:-1;;;;;2926:296:137;;;;;;;2321:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2321:153:137;-1:-1:-1;;;;;2321:153:137;;;;;;;;;;4580:110:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4580:110:4;-1:-1:-1;;;;;4580:110:4;;;;;;;1274:103:130;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:130;-1:-1:-1;;;;;1274:103:130;;;;;796:66:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;796:66:4;-1:-1:-1;;;;;796:66:4;;;;;;;;;;436:35:136;;;;;;;;;:::o;319:18:133:-;;;;;;;;;;;;;;;-1:-1:-1;;319:18:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3499:165:4:-;3561:11;3584:52;3612:10;3624:3;3629:6;3584:27;:52::i;:::-;-1:-1:-1;3653:4:4;3499:165;;;;:::o;1061:183:0:-;719:5:130;;-1:-1:-1;;;;;719:5:130;705:10;:19;697:28;;;;;;1150:40:0;1174:15;1150:23;:40::i;:::-;1142:49;;;;;;;;1201:18;:36;;-1:-1:-1;;1201:36:0;-1:-1:-1;;;;;1201:36:0;;;;;;;;;;1061:183::o;389:83:131:-;455:12;;389:83;:::o;1925:1348:4:-;2017:4;;-1:-1:-1;;;;;2041:21:4;;;;2033:30;;;;;;-1:-1:-1;;;;;2081:24:4;;;;2073:33;;;;;;-1:-1:-1;;;;;2137:17:4;;;;;;:8;:17;;;;;;:30;;2159:7;2137:30;:21;:30;:::i;:::-;-1:-1:-1;;;;;2117:17:4;;;;;;;:8;:17;;;;;;:50;;;;2200:20;;;;;;;:33;;2225:7;2200:33;:24;:33;:::i;:::-;-1:-1:-1;;;;;2177:20:4;;;;;;;:8;:20;;;;;;;;;:56;;;;2248:38;;;;;;;2177:20;;2248:38;;;;-1:-1:-1;;;;;;;;;;;2248:38:4;;;;;;;;-1:-1:-1;;;;;2301:21:4;;2312:10;2301:21;2297:891;;2362:30;2372:7;2381:10;2362:9;:30::i;:::-;2338:54;-1:-1:-1;;;2411:28:4;;2407:652;;2615:26;:13;2633:7;2615:26;:17;:26;:::i;:::-;-1:-1:-1;;;;;2584:16:4;;;;;;:7;:16;;;;;;;;2601:10;2584:28;;;;;;;;;;:57;;;2664:59;;;;;;2601:10;;-1:-1:-1;;;;;;;;;;;2664:59:4;;;;;;;;;;2407:652;;;-1:-1:-1;;;;;2963:20:4;;;;;;:11;:20;;;;;;;;2984:10;2963:32;;;;;;;;:37;;:80;;-1:-1:-1;;;;;;3004:20:4;;;;;;:11;:20;;;;;;;;3025:10;3004:32;;;;;;;;3040:3;-1:-1:-1;3004:39:4;2963:80;2955:89;;;;;;;;3198:47;3216:7;3225:10;3237:7;3198:17;:47::i;:::-;-1:-1:-1;3262:4:4;;1925:1348;-1:-1:-1;;;;1925:1348:4:o;634:108::-;676:66;634:108;:::o;365:21:133:-;;;;;;:::o;179:31:4:-;;;;:::o;3889:215::-;4017:10;3966:11;4034:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;4034:24:4;;;;;;;;;;3966:11;;3989:87;;4029:3;;4034:41;;4063:11;4034:41;:28;:41;:::i;:::-;3989:27;:87::i;1425:365:0:-;1530:4;1516:3;-1:-1:-1;;;;;1312:24:0;;;;;;:55;;-1:-1:-1;;;;;;1340:27:0;;1362:4;1340:27;;1312:55;1304:64;;;;;;;;1554:26;1568:3;1573:6;1554:13;:26::i;:::-;1546:35;;;;;;;;1617:3;-1:-1:-1;;;;;1596:40:0;1605:10;-1:-1:-1;;;;;1596:40:0;;1622:6;1630:5;;1596:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1596:40:0;;-1:-1:-1;;;;;1596:40:0;1651:28;1675:3;1651:23;:28::i;:::-;1647:116;;;1703:48;1720:10;1732:3;1737:6;1745:5;;1703:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1703:16:0;;-1:-1:-1;;;;;1703:48:0:i;:::-;1695:57;;;;;;;;-1:-1:-1;1779:4:0;;1425:365;-1:-1:-1;;;;;1425:365:0:o;854:312:136:-;600:5;;968:4;;-1:-1:-1;;;;;600:5:136;586:10;:19;578:28;;;;;;511:15;;;;;;;510:16;502:25;;;;;;997:12;;:25;;1014:7;997:25;:16;:25;:::i;:::-;982:12;:40;-1:-1:-1;;;;;1044:13:136;;;;;;:8;:13;;;;;;:26;;1062:7;1044:26;:17;:26;:::i;:::-;-1:-1:-1;;;;;1028:13:136;;;;;;:8;:13;;;;;;;;;:42;;;;1081:18;;;;;;;1028:13;;1081:18;;;;;;;;;1110:34;;;;;;;;-1:-1:-1;;;;;1110:34:136;;;1127:1;;-1:-1:-1;;;;;;;;;;;1110:34:136;;;;;;;;-1:-1:-1;1157:4:136;854:312;;;;:::o;353:73:132:-;396:25;402:10;414:6;396:5;:25::i;:::-;353:73;:::o;113:36:4:-;;;;;;;;;;;;;;;;;;;:::o;3679:432:137:-;3826:10;3785:4;3818:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3818:29:137;;;;;;;;;;3857:28;;;3853:165;;3903:10;3927:1;3895:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3895:29:137;;;;;;;;;:33;3853:165;;;3981:30;:8;3994:16;3981:30;:12;:30;:::i;:::-;3957:10;3949:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3949:29:137;;;;;;;;;:62;3853:165;4037:10;4059:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;4028:61:137;;4059:29;;;;;;;;;;;4028:61;;;;;;;;;4037:10;-1:-1:-1;;;;;;;;;;;4028:61:137;;;;;;;;;;-1:-1:-1;4102:4:137;;3679:432;-1:-1:-1;;;3679:432:137:o;4178:110:0:-;719:5:130;;-1:-1:-1;;;;;719:5:130;705:10;:19;697:28;;;;;;4257:24:0;4269:6;4277:3;4257:11;:24::i;:::-;4178:110;;:::o;1149:99:131:-;-1:-1:-1;;;;;1227:16:131;1205:7;1227:16;;;:8;:16;;;;;;;1149:99::o;3872:71:0:-;719:5:130;;-1:-1:-1;;;;;719:5:130;705:10;:19;697:28;;;;;3176:117:0;3268:18;;-1:-1:-1;;;;;3268:18:0;;;3256:30;;;;3176:117::o;3794:72::-;3835:4;3851:8;;;749:41:4;;;;;;;;;;;;;:::o;1796:135:0:-;1916:1;1919;1856:12;1796:135;;;:::o;238:20:130:-;;;-1:-1:-1;;;;;238:20:130;;:::o;6089:656:4:-;6361:14;;6319:12;;;:30;;;6342:7;6335:3;:14;;6319:30;6311:39;;;;;;;;6386:80;;;416:66;6386:80;;;;-1:-1:-1;;;;;6386:80:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;6386:80:4;;;;;;;6378:89;;:7;:89::i;:::-;6361:106;;6497:28;6506:6;6514:2;6518;6522;6497:8;:28::i;:::-;-1:-1:-1;;;;;6486:39:4;;;;;;6478:48;;;;;;-1:-1:-1;;;;;6554:15:4;;;;;;:6;:15;;;;;:17;;;;;;;;6544:27;;6536:36;;;;;;6600:8;:26;;6625:1;6600:26;;;-1:-1:-1;;6600:26:4;6583:43;;6670:8;:22;;6691:1;6670:22;;;6681:7;6670:22;-1:-1:-1;;;;;6637:20:4;;;;;;;:11;:20;;;;;;;;:30;;;;;;;;;:55;6703:35;6649:7;6658:8;6731:6;6703:8;:35::i;:::-;6089:656;;;;;;;;;;:::o;341:20:133:-;;;;;;;;;;;;;;;-1:-1:-1;;341:20:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4453:163:0;4538:4;4561:48;4584:7;4593:15;4561:22;:48::i;:::-;4554:55;4453:163;-1:-1:-1;;;4453:163:0:o;2070:194::-;2133:4;2157:26;2171:3;2176:6;2157:13;:26::i;:::-;2149:35;;;;;;;;2194:42;2212:10;2224:3;2229:6;2194:17;:42::i;4252:106:4:-;4313:38;4326:10;4338:3;4343:7;4313:12;:38::i;:::-;;4252:106;;:::o;4890:116::-;4966:33;4979:5;4986:3;4991:7;4966:12;:33::i;:::-;;4890:116;;;:::o;367:115::-;416:66;367:115;:::o;955:100:0:-;1030:18;;-1:-1:-1;;;;;1030:18:0;955:100;:::o;7686:509:4:-;7923:13;;7895:3;:16;-1:-1:-1;7895:16:4;7887:25;;;;;;-1:-1:-1;;;;;7939:15:4;;;;;;;:6;:15;;;;;;;;;:17;;;;;;;;7991:72;;676:66;7991:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;7991:72:4;;;;;;7939:17;-1:-1:-1;7983:81:4;;:7;:81::i;:::-;7966:98;;8094:28;8103:6;8111:2;8115;8119;8094:8;:28::i;:::-;-1:-1:-1;;;;;8083:39:4;;;;;;8075:48;;;;;;8134:54;8162:7;8171:8;8181:6;8134:27;:54::i;:::-;7686:509;;;;;;;;;:::o;2926:296:137:-;3089:10;3027:4;3081:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3081:29:137;;;;;;;;;;:46;;3115:11;3081:46;:33;:46;:::i;:::-;3049:10;3041:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3041:29:137;;;;;;;;;;;;:87;;;3139:61;;;;;;3041:29;;-1:-1:-1;;;;;;;;;;;3139:61:137;;;;;;;;;;-1:-1:-1;3213:4:137;2926:296;;;;:::o;2321:153::-;-1:-1:-1;;;;;2444:15:137;;;2420:7;2444:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;2321:153::o;4580:110:4:-;4643:40;4656:5;4663:10;4675:7;4643:12;:40::i;1274:103:130:-;719:5;;-1:-1:-1;;;;;719:5:130;705:10;:19;697:28;;;;;;1343:29;1362:9;1343:18;:29::i;796:66:4:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;8508:372::-;8615:35;8624:6;8632:8;8642:7;8615:8;:35::i;:::-;-1:-1:-1;;8789:7:4;:22;8785:89;;;-1:-1:-1;;;;;8834:19:4;;;;;;;:11;:19;;;;;;;;:29;;;;;;;;;;;8827:36;8508:372;;;:::o;438:578:128:-;496:4;971:18;;1003:8;;438:578::o;1060:116:129:-;1120:7;1142:8;;;;1135:16;;;;-1:-1:-1;1164:7:129;;;1060:116::o;1238:128::-;1319:7;;;1339;;;;1332:15;;;;1238:128;;;;:::o;2971:199:0:-;3065:13;3074:3;3065:8;:13::i;:::-;3061:103;;;3139:12;;;3149:1;3139:12;;;;;;;;3102:50;;3119:5;;3126:3;;3131:6;;3102:16;:50::i;:::-;3094:59;;;;;;;1937:127;2007:4;2030:27;2045:3;2050:6;2030:14;:27::i;3585:203::-;3685:4;3708:3;-1:-1:-1;;;;;3708:8:0;677:10;-1:-1:-1;;;3740:17:0;3759:5;3766:6;3774:5;3717:63;;;;;;-1:-1:-1;;;;;3717:63:0;-1:-1:-1;;;;;3717:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3717:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3717:63:0;;;-1:-1:-1;;26:21;;;22:32;6:49;;3717:63:0;;;49:4:-1;25:18;;61:17;;3717:63:0;182:15:-1;3717:63:0;;;;179:29:-1;;;;160:49;;3708:73:0;;;3717:63;;3708:73;;-1:-1:-1;3708:73:0;;-1:-1:-1;25:18;-1:-1;3708:73:0;-1:-1:-1;3708:73:0;;-1:-1:-1;3708:73:0;25:18:-1;-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3708:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3585:203;-1:-1:-1;;;;;;;3585:203:0:o;430:438:132:-;-1:-1:-1;;;;;508:14:132;;;;;;:8;:14;;;;;;498:24;;;490:33;;;;;;-1:-1:-1;;;;;718:14:132;;;;;;:8;:14;;;;;;:26;;737:6;718:26;:18;:26;:::i;:::-;-1:-1:-1;;;;;701:14:132;;;;;;:8;:14;;;;;:43;765:12;;:24;;782:6;765:24;:16;:24;:::i;:::-;750:12;:39;800:18;;;;;;;;-1:-1:-1;;;;;800:18:132;;;;;;;;;;;;;829:34;;;;;;;;852:1;;-1:-1:-1;;;;;829:34:132;;;-1:-1:-1;;;;;;;;;;;829:34:132;;;;;;;;430:438;;:::o;892:225:80:-;964:3;-1:-1:-1;;;;;455:17:80;;;;447:26;;;;;;-1:-1:-1;;;;;983:20:80;;;979:132;;;1019:21;1036:3;1019:16;:21::i;:::-;979:132;;;1071:29;1088:6;1096:3;1071:16;:29::i;9604:182:4:-;9671:7;9736:16;;9764:12;9754:23;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;9754:23:4;;;;;;;;;;;;9707:71;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;9707:71:4;;;;;;;;9697:82;;9707:71;;-1:-1:-1;9707:71:4;;-1:-1:-1;9697:82:4;;;;-1:-1:-1;9697:82:4;9707:71;9697:82;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;9697:82:4;;;;;;;;;;;;-1:-1:-1;;;;;9604:182:4:o;10156:506::-;10248:7;10517:14;10275:2;:8;;10281:2;10275:8;:20;;;;10287:2;:8;;10293:2;10287:8;10275:20;10267:67;;;;;;;-1:-1:-1;;;;;10267:67:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10380:66;10365:81;;;10344:162;;;;;-1:-1:-1;;;;;10344:162:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10534:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10534:30:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;10534:30:4;;-1:-1:-1;;10534:30:4;;;-1:-1:-1;;;;;;;10582:20:4;;;;10574:57;;;;;-1:-1:-1;;;;;10574:57:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;10649:6;10156:506;-1:-1:-1;;;;;10156:506:4:o;9124:339::-;-1:-1:-1;;;;;9220:20:4;;;;9212:69;;;;;-1:-1:-1;;;;;9212:69:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9299:22:4;;;;9291:69;;;;;-1:-1:-1;;;;;9291:69:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9371:15:4;;;;;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;:35;;;9421;;;;;;;-1:-1:-1;;;;;;;;;;;9421:35:4;;;;;;;;;9124:339;;;:::o;1512:171:130:-;-1:-1:-1;;;;;1582:23:130;;;;1574:32;;;;;;1638:5;;1617:38;;-1:-1:-1;;;;;1617:38:130;;;;1638:5;;1617:38;;1638:5;;1617:38;1661:5;:17;;-1:-1:-1;;1661:17:130;-1:-1:-1;;;;;1661:17:130;;;;;;;;;;1512:171::o;626:321:131:-;728:10;689:4;719:20;;;:8;:20;;;;;;709:30;;;701:39;;;;;;-1:-1:-1;;;;;754:17:131;;;;746:26;;;;;;811:10;802:20;;;;:8;:20;;;;;;:32;;827:6;802:32;:24;:32;:::i;:::-;788:10;779:20;;;;:8;:20;;;;;;:55;;;;-1:-1:-1;;;;;856:13:131;;;;;;:25;;874:6;856:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;840:13:131;;;;;;:8;:13;;;;;;;;;:41;;;;892:33;;;;;;;840:13;;901:10;;-1:-1:-1;;;;;;;;;;;892:33:131;;;;;;;;;-1:-1:-1;938:4:131;626:321;;;;:::o;1270:145:80:-;1352:4;1344:21;1375:33;1397:3;1344:21;1375;:33::i;1656:210::-;1795:21;;;;;;1811:4;1795:21;;;;;;1760:6;;1730:16;;-1:-1:-1;;;;;1795:15:80;;;;;:21;;;;;;;;;;;;;;1730:16;1795:15;:21;;;5:2:-1;;;;30:1;27;20:12;5:2;1795:21:80;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1795:21:80;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1795:21:80;;-1:-1:-1;1826:33:80;-1:-1:-1;;;;;1826:19:80;;1846:3;1795:21;1826:33;:19;:33;:::i;431:177:35:-;513:22;;-1:-1:-1;;;;;513:14:35;;;:22;;;;;528:6;;513:22;;;;528:6;513:14;:22;;;;;;;512:23;508:94;;;573:6;581:9;551:40;;:::i;:::-;-1:-1:-1;;;;;551:40:35;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;431:177:35;;:::o;579:339:39:-;677:6;-1:-1:-1;;;;;665:28:39;;694:3;699:6;665:41;;;;;-1:-1:-1;;;665:41:39;;;;;;;-1:-1:-1;;;;;665:41:39;-1:-1:-1;;;;;665:41:39;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;665:41:39;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;665:41:39;;;;742:14;739:2;;;796;793:1;790;775:24;832:1;826:8;819:16;816:2;;;868:1;865;858:12;60:10604:4;;;;;;;;;;:::o",
  "source": "pragma solidity 0.4.24;\n\nimport \"./ERC677BridgeToken.sol\";\n\ncontract PermittableToken is ERC677BridgeToken {\n    string public constant version = \"1\";\n\n    // EIP712 niceties\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH_LEGACY = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH_LEGACY = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    mapping(address => uint256) public nonces;\n    mapping(address => mapping(address => uint256)) public expirations;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _chainId)\n        public\n        ERC677BridgeToken(_name, _symbol, _decimals)\n    {\n        require(_chainId != 0);\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(bytes(version)),\n                _chainId,\n                address(this)\n            )\n        );\n    }\n\n    /// @dev transferFrom in this contract works in a slightly different form than the generic\n    /// transferFrom function. This contract allows for \"unlimited approval\".\n    /// Should the user approve an address for the maximum uint256 value,\n    /// then that address will have unlimited approval until told otherwise.\n    /// @param _sender The address of the sender.\n    /// @param _recipient The address of the recipient.\n    /// @param _amount The value to transfer.\n    /// @return Success status.\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\n        require(_sender != address(0));\n        require(_recipient != address(0));\n\n        balances[_sender] = balances[_sender].sub(_amount);\n        balances[_recipient] = balances[_recipient].add(_amount);\n        emit Transfer(_sender, _recipient, _amount);\n\n        if (_sender != msg.sender) {\n            uint256 allowedAmount = allowance(_sender, msg.sender);\n\n            if (allowedAmount != uint256(-1)) {\n                // If allowance is limited, adjust it.\n                // In this case `transferFrom` works like the generic\n                allowed[_sender][msg.sender] = allowedAmount.sub(_amount);\n                emit Approval(_sender, msg.sender, allowed[_sender][msg.sender]);\n            } else {\n                // If allowance is unlimited by `permit`, `approve`, or `increaseAllowance`\n                // function, don't adjust it. But the expiration date must be empty or in the future\n                require(expirations[_sender][msg.sender] == 0 || expirations[_sender][msg.sender] >= now);\n            }\n        } else {\n            // If `_sender` is `msg.sender`,\n            // the function works just like `transfer()`\n        }\n\n        callAfterTransfer(_sender, _recipient, _amount);\n        return true;\n    }\n\n    /// @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    /// @param _to The address which will spend the funds.\n    /// @param _value The amount of tokens to be spent.\n    function approve(address _to, uint256 _value) public returns (bool result) {\n        _approveAndResetExpirations(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev Atomically increases the allowance granted to spender by the caller.\n    /// @param _to The address which will spend the funds.\n    /// @param _addedValue The amount of tokens to increase the allowance by.\n    function increaseAllowance(address _to, uint256 _addedValue) public returns (bool result) {\n        _approveAndResetExpirations(msg.sender, _to, allowed[msg.sender][_to].add(_addedValue));\n        return true;\n    }\n\n    /// @dev An alias for `transfer` function.\n    /// @param _to The address of the recipient.\n    /// @param _amount The value to transfer.\n    function push(address _to, uint256 _amount) public {\n        transferFrom(msg.sender, _to, _amount);\n    }\n\n    /// @dev Makes a request to transfer the specified amount\n    /// from the specified address to the caller's address.\n    /// @param _from The address of the holder.\n    /// @param _amount The value to transfer.\n    function pull(address _from, uint256 _amount) public {\n        transferFrom(_from, msg.sender, _amount);\n    }\n\n    /// @dev An alias for `transferFrom` function.\n    /// @param _from The address of the sender.\n    /// @param _to The address of the recipient.\n    /// @param _amount The value to transfer.\n    function move(address _from, address _to, uint256 _amount) public {\n        transferFrom(_from, _to, _amount);\n    }\n\n    /// @dev Allows to spend holder's unlimited amount by the specified spender.\n    /// The function can be called by anyone, but requires having allowance parameters\n    /// signed by the holder according to EIP712.\n    /// @param _holder The holder's address.\n    /// @param _spender The spender's address.\n    /// @param _nonce The nonce taken from `nonces(_holder)` public getter.\n    /// @param _expiry The allowance expiration date (unix timestamp in UTC).\n    /// Can be zero for no expiration. Forced to zero if `_allowed` is `false`.\n    /// Note that timestamps are not precise, malicious miner/validator can manipulate them to some extend.\n    /// Assume that there can be a 900 seconds time delta between the desired timestamp and the actual expiration.\n    /// @param _allowed True to enable unlimited allowance for the spender by the holder. False to disable.\n    /// @param _v A final byte of signature (ECDSA component).\n    /// @param _r The first 32 bytes of signature (ECDSA component).\n    /// @param _s The second 32 bytes of signature (ECDSA component).\n    function permit(\n        address _holder,\n        address _spender,\n        uint256 _nonce,\n        uint256 _expiry,\n        bool _allowed,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        require(_expiry == 0 || now <= _expiry);\n\n        bytes32 digest = _digest(abi.encode(PERMIT_TYPEHASH_LEGACY, _holder, _spender, _nonce, _expiry, _allowed));\n\n        require(_holder == _recover(digest, _v, _r, _s));\n        require(_nonce == nonces[_holder]++);\n\n        uint256 amount = _allowed ? uint256(-1) : 0;\n\n        expirations[_holder][_spender] = _allowed ? _expiry : 0;\n\n        _approve(_holder, _spender, amount);\n    }\n\n    /** @dev Allows to spend holder's unlimited amount by the specified spender according to EIP2612.\n     * The function can be called by anyone, but requires having allowance parameters\n     * signed by the holder according to EIP712.\n     * @param _holder The holder's address.\n     * @param _spender The spender's address.\n     * @param _value Allowance value to set as a result of the call.\n     * @param _deadline The deadline timestamp to call the permit function. Must be a timestamp in the future.\n     * Note that timestamps are not precise, malicious miner/validator can manipulate them to some extend.\n     * Assume that there can be a 900 seconds time delta between the desired timestamp and the actual expiration.\n     * @param _v A final byte of signature (ECDSA component).\n     * @param _r The first 32 bytes of signature (ECDSA component).\n     * @param _s The second 32 bytes of signature (ECDSA component).\n     */\n    function permit(\n        address _holder,\n        address _spender,\n        uint256 _value,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        require(now <= _deadline);\n\n        uint256 nonce = nonces[_holder]++;\n        bytes32 digest = _digest(abi.encode(PERMIT_TYPEHASH, _holder, _spender, _value, nonce, _deadline));\n\n        require(_holder == _recover(digest, _v, _r, _s));\n\n        _approveAndResetExpirations(_holder, _spender, _value);\n    }\n\n    /**\n     * @dev Sets a new allowance value for the given owner and spender addresses.\n     * Resets expiration timestamp in case of unlimited approval.\n     * @param _owner address tokens holder.\n     * @param _spender address of tokens spender.\n     * @param _amount amount of approved tokens.\n     */\n    function _approveAndResetExpirations(address _owner, address _spender, uint256 _amount) internal {\n        _approve(_owner, _spender, _amount);\n\n        // it is not necessary to reset _expirations in other cases, since it is only used together with infinite allowance\n        if (_amount == uint256(-1)) {\n            delete expirations[_owner][_spender];\n        }\n    }\n\n    /**\n     * @dev Internal function for issuing an allowance.\n     * @param _owner address of the tokens owner.\n     * @param _spender address of the approved tokens spender.\n     * @param _amount amount of the approved tokens.\n     */\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n\n        allowed[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    /**\n     * @dev Calculates the message digest for encoded EIP712 typed struct.\n     * @param _typedStruct encoded payload.\n     */\n    function _digest(bytes memory _typedStruct) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(_typedStruct)));\n    }\n\n    /**\n     * @dev Derives the signer address for the given message digest and ECDSA signature params.\n     * @param _digest signed message digest.\n     * @param _v a final byte of signature (ECDSA component).\n     * @param _r the first 32 bytes of the signature (ECDSA component).\n     * @param _s the second 32 bytes of the signature (ECDSA component).\n     */\n    function _recover(bytes32 _digest, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n        require(_v == 27 || _v == 28, \"ECDSA: invalid signature 'v' value\");\n        require(\n            uint256(_s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n\n        address signer = ecrecover(_digest, _v, _r, _s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.0",
  "updatedAt": "2021-08-07T10:27:34.284Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "_owner": "address The address which owns the funds.",
          "_spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
        "params": {
          "_to": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_owner": "The address to query the the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specific amount of tokens.",
        "params": {
          "_value": "The amount of token to be burned."
        }
      },
      "claimTokens(address,address)": {
        "details": "Withdraws the erc20 tokens or native coins from this contract.",
        "params": {
          "_to": "address of the tokens/coins receiver.",
          "_token": "address of the claimed token or address(0) for native coins."
        }
      },
      "decreaseApproval(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to spender by the caller.",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.",
          "_to": "The address which will spend the funds."
        }
      },
      "increaseApproval(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.",
          "_spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_to": "The address that will receive the minted tokens."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "move(address,address,uint256)": {
        "details": "An alias for `transferFrom` function.",
        "params": {
          "_amount": "The value to transfer.",
          "_from": "The address of the sender.",
          "_to": "The address of the recipient."
        }
      },
      "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Allows to spend holder's unlimited amount by the specified spender. The function can be called by anyone, but requires having allowance parameters signed by the holder according to EIP712.",
        "params": {
          "_allowed": "True to enable unlimited allowance for the spender by the holder. False to disable.",
          "_expiry": "The allowance expiration date (unix timestamp in UTC). Can be zero for no expiration. Forced to zero if `_allowed` is `false`. Note that timestamps are not precise, malicious miner/validator can manipulate them to some extend. Assume that there can be a 900 seconds time delta between the desired timestamp and the actual expiration.",
          "_holder": "The holder's address.",
          "_nonce": "The nonce taken from `nonces(_holder)` public getter.",
          "_r": "The first 32 bytes of signature (ECDSA component).",
          "_s": "The second 32 bytes of signature (ECDSA component).",
          "_spender": "The spender's address.",
          "_v": "A final byte of signature (ECDSA component)."
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Allows to spend holder's unlimited amount by the specified spender according to EIP2612. The function can be called by anyone, but requires having allowance parameters signed by the holder according to EIP712.",
        "params": {
          "_deadline": "The deadline timestamp to call the permit function. Must be a timestamp in the future. Note that timestamps are not precise, malicious miner/validator can manipulate them to some extend. Assume that there can be a 900 seconds time delta between the desired timestamp and the actual expiration.",
          "_holder": "The holder's address.",
          "_r": "The first 32 bytes of signature (ECDSA component).",
          "_s": "The second 32 bytes of signature (ECDSA component).",
          "_spender": "The spender's address.",
          "_v": "A final byte of signature (ECDSA component).",
          "_value": "Allowance value to set as a result of the call."
        }
      },
      "pull(address,uint256)": {
        "details": "Makes a request to transfer the specified amount from the specified address to the caller's address.",
        "params": {
          "_amount": "The value to transfer.",
          "_from": "The address of the holder."
        }
      },
      "push(address,uint256)": {
        "details": "An alias for `transfer` function.",
        "params": {
          "_amount": "The value to transfer.",
          "_to": "The address of the recipient."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transferFrom(address,address,uint256)": {
        "details": "transferFrom in this contract works in a slightly different form than the generic transferFrom function. This contract allows for \"unlimited approval\". Should the user approve an address for the maximum uint256 value, then that address will have unlimited approval until told otherwise.",
        "params": {
          "_amount": "The value to transfer.",
          "_recipient": "The address of the recipient.",
          "_sender": "The address of the sender."
        },
        "return": "Success status."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}
